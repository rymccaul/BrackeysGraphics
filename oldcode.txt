public void changeLanes(float frontTimeToCollision)
    {
        if (currentLane == destinationLane)
        {


            rightLaneChangeSafe = false;
            leftLaneChangeSafe = false;

            Vector3 overlapBoxSize = new Vector3(4f, 0.25f, 10f);
            Vector3 centerPosition = rb.position;

            Collider[] proximityCheck = Physics.OverlapBox(centerPosition, overlapBoxSize, Quaternion.identity, layermask);

            //string myMessage = rb.name + " wants to change lanes, in da house is: ";

            float leftTimeToCollision = 50f;
            float rightTimeToCollision = 50f;

            foreach (Collider go in proximityCheck)
            {
                if (go != col)
                {

                    obstacle_movement closeObstacleScript = go.gameObject.GetComponent<obstacle_movement>();
                    int closeDestinationLane = closeObstacleScript.destinationLane;
                    int closeCurrentLane = closeObstacleScript.currentLane;

                    //myMessage += go.name + " (destlane = " + closeDestinationLane;

                    if (closeDestinationLane == (currentLane + 1))
                    {
                        Rigidbody closeRb = go.attachedRigidbody;
                        float distanceFromCenter = closeRb.position.z - transform.position.z;

                        if (distanceFromCenter < 2 && distanceFromCenter > -2)
                        {
                            //myMessage += ", right collision hazard is guaranteed";
                            rightTimeToCollision = 0;
                            //Debug.Break();
                        }
                        else
                        {

                            float closeVelocityDifferenceRight = rb.velocity.z - closeRb.velocity.z;
                            
                            if (closeVelocityDifferenceRight != 0)
                            {
                                float newRightTimeToCollision = distanceFromCenter / closeVelocityDifferenceRight;
                                //myMessage += ", right time to collision = " + newRightTimeToCollision;
                                if (newRightTimeToCollision > 0 && newRightTimeToCollision < rightTimeToCollision)
                                {
                                    rightTimeToCollision = newRightTimeToCollision;
                                }
                            }
                        }
                        //else if (distanceFromCenter < 1 && distanceFromCenter > -1)
                        //{
                        //    rightTimeToCollision = 0;
                        //    myMessage += ", right collision hazard is guaranteed";
                        //}


                    }
                    else if (closeDestinationLane == (currentLane - 1))
                    {
                        Rigidbody closeRb = go.attachedRigidbody;
                        float distanceFromCenter = closeRb.position.z - transform.position.z;

                        if (distanceFromCenter < 2 && distanceFromCenter > -2)
                        {
                            //myMessage += ", left collision hazard is guaranteed";
                            leftTimeToCollision = 0;
                            //Debug.Break();
                        }
                        else
                        {

                            float closeVelocityDifferenceLeft = rb.velocity.z - closeRb.velocity.z;

                            if (closeVelocityDifferenceLeft != 0)
                            {
                                float newLeftTimeToCollision = distanceFromCenter / closeVelocityDifferenceLeft;
                                //myMessage += ", left time to collision = " + newLeftTimeToCollision;
                                if (newLeftTimeToCollision > 0 && newLeftTimeToCollision < leftTimeToCollision)
                                {
                                    leftTimeToCollision = newLeftTimeToCollision;
                                }
                            }

                        }
                    }
                    
                    else if (closeDestinationLane == currentLane && closeDestinationLane != closeCurrentLane)
                    {
                        if (closeDestinationLane > closeCurrentLane) // then they must be changing lanes to the right
                        {
                            Rigidbody closeRb = go.attachedRigidbody;
                            float distanceFromCenter = closeRb.position.z - transform.position.z;

                            if (distanceFromCenter < 1 && distanceFromCenter > -1)
                            {
                                leftTimeToCollision = 0;
                            }
                            else
                            {
                                float closeVelocityDifferenceLeft = rb.velocity.z - closeRb.velocity.z;

                                if (closeVelocityDifferenceLeft != 0)
                                {
                                    float newLeftTimeToCollision = distanceFromCenter / closeVelocityDifferenceLeft;
                                    if (newLeftTimeToCollision > 0 && newLeftTimeToCollision < leftTimeToCollision)
                                    {
                                        leftTimeToCollision = newLeftTimeToCollision;
                                    }
                                }
                            }
                        }
                        else if (closeDestinationLane < closeCurrentLane) // then they must be changing lanes to the left
                        {
                            Rigidbody closeRb = go.attachedRigidbody;
                            float distanceFromCenter = closeRb.position.z - transform.position.z;

                            if (distanceFromCenter < 1 && distanceFromCenter > -1)
                            {
                                rightTimeToCollision = 0;
                            }
                            else
                            {
                                float closeVelocityDifferenceRight = rb.velocity.z - closeRb.velocity.z;
                                if (closeVelocityDifferenceRight != 0)
                                {
                                    float newRightTimeToCollision = distanceFromCenter / closeVelocityDifferenceRight;
                                    if (newRightTimeToCollision > 0 && newRightTimeToCollision < rightTimeToCollision)
                                    {
                                        rightTimeToCollision = newRightTimeToCollision;
                                    }
                                }
                            }
                        }
                    }
                    

                    //myMessage += "); ";

                }
                //Debug.Log(rb.name + " wants to change lanes, " + go.name + " in da house");
            }

            //Debug.Log(myMessage);
            //Debug.Break();

            
            if (currentLane != 3)
            {
                if (rightTimeToCollision < 0)
                {
                    rightLaneChangeSafe = true;
                }
                else if (rightTimeToCollision > 2f)
                {
                    if (rightTimeToCollision > frontTimeToCollision)
                    {
                        rightLaneChangeSafe = true;
                    }
                    else
                    {
                        Debug.Log(rb.name + " likes current lane more than right.");
                        //Debug.Break();
                    }
                }
            }

            if (currentLane != -3)
            {
                if (leftTimeToCollision < 0 )
                {
                    leftLaneChangeSafe = true;
                }
                else if (leftTimeToCollision > 2f)
                {
                    if (leftTimeToCollision > frontTimeToCollision)
                    {
                        leftLaneChangeSafe = true;
                    }
                    else
                    {
                        Debug.Log(rb.name + " likes current lane more than left.");
                        //Debug.Break();
                    }
                }



                /*
                if (leftTimeToCollision < 0 || leftTimeToCollision > 2f)
                {
                    leftLaneChangeSafe = true;
                }
                */
            }

            if (leftLaneChangeSafe == false && rightLaneChangeSafe == false)
            {
                //Debug.Log(rb.name + " has no safe lane to change to!");
                //Debug.Break();
            }

            if (rightLaneChangeSafe == true)
            {
                if (leftLaneChangeSafe == false)
                {
                    destinationLane++;
                    rb.AddForce(75, 0, 0);
                    
                    closeSensorScript.sensorResizeX = 1.5f;
                    closeSensorScript.sensorPosX = 0.25f;

                    GetComponent<Renderer>().material = turnSignal;

                }
                else
                {
                    if (rightTimeToCollision > leftTimeToCollision)
                    {
                        destinationLane++;
                        rb.AddForce(75, 0, 0);

                        closeSensorScript.sensorResizeX = 1.5f;
                        closeSensorScript.sensorPosX = 0.25f;

                        GetComponent<Renderer>().material = turnSignal;
                    }
                    else if (rightTimeToCollision != leftTimeToCollision)
                    {
                        destinationLane--;
                        rb.AddForce(-75, 0, 0);

                        closeSensorScript.sensorResizeX = 1.5f;
                        closeSensorScript.sensorPosX = -0.25f;

                        GetComponent<Renderer>().material = turnSignal;
                    }
                    else
                    {
                        int leftOrRight = Random.Range(1, 3);
                        if (leftOrRight == 1)
                        {
                            destinationLane--;
                            rb.AddForce(-75, 0, 0);

                            closeSensorScript.sensorResizeX = 1.5f;
                            closeSensorScript.sensorPosX = -0.25f;

                            GetComponent<Renderer>().material = turnSignal;
                        }
                        else
                        {
                            destinationLane++;
                            rb.AddForce(75, 0, 0);

                            closeSensorScript.sensorResizeX = 1.5f;
                            closeSensorScript.sensorPosX = 0.25f;

                            GetComponent<Renderer>().material = turnSignal;
                        }
                    }

                    /*
                    int leftOrRight = Random.Range(0, 2);
                    if (leftOrRight == 0)
                    {
                        Debug.Log(rb.name + "went to to a tossup and chose left.");
                        destinationLane--;
                        rb.AddForce(-75, 0, 0);
                    }
                    else
                    {
                        Debug.Log(rb.name + "went to to a tossup and chose right.");
                        destinationLane++;
                        rb.AddForce(75, 0, 0);

                    }
                    */
                }
                //Debug.Break();
            }
            else if (leftLaneChangeSafe == true)
            {
                destinationLane--;
                rb.AddForce(-75, 0, 0);

                GetComponent<Renderer>().material = turnSignal;
                //Debug.Break();
            }

        }
    }